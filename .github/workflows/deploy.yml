# .github/workflows/deploy.yml

name: Qrystal Main-App CI/CD

# 1. 언제 이 워크플로우를 실행할 것인가?
on:
  push:
    branches: [ "main" ] # main 브랜치에 push 이벤트가 발생했을 때 실행

# 2. 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2                   # AWS 리전
  ECR_REPOSITORY: qrystal/main-app             # ECR 리포지토리 이름
  DOCKER_IMAGE_TAG: ${{ github.sha }}          # Docker 이미지 태그 (git commit hash 사용)

jobs:
  # 3. 어떤 작업(Job)들을 실행할 것인가?
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest # 작업이 실행될 가상 환경

    steps: # 작업 내에서 순차적으로 실행될 단계들
      # 1. 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      # 4. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 5. AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build and push Docker image to Amazon ECR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
