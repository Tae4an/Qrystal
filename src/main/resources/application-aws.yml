# AWS 프리티어 최적화 설정 (t2.micro 1GB RAM 기준)
server:
  port: 80
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  tomcat:
    max-threads: 50               # t2.micro에 맞게 감소 (기본 200 -> 50)
    connection-timeout: 20000
    max-connections: 1000         # 감소 (기본 8192 -> 1000)
    accept-count: 100             # 감소 (기본 100)

spring:
  # 데이터베이스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

    hikari:  # 메모리 최적화 설정
      maximum-pool-size: 3        # 감소 (기본 10 -> 3)
      minimum-idle: 1             # 감소 (기본 5 -> 1)
      idle-timeout: 30000
      connection-timeout: 30000
      leak-detection-threshold: 60000

  # MVC 설정
  mvc:
    static-path-pattern: /**

  # 타임리프 설정
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    cache: true                   # 프로덕션이므로 캐싱 활성화
    encoding: UTF-8
    mode: HTML

  # 정적 리소스 설정
  web:
    resources:
      static-locations: classpath:/static/
      cache:
        period: 3600

  # Redis 설정 (로컬 Redis 컨테이너)
  redis:
    host: redis                   # docker-compose 서비스명
    port: 6379
    password:                     # 비밀번호 없음
    timeout: 3000
    lettuce:
      pool:
        max-active: 2             # 감소 (기본 8 -> 2)
        max-idle: 2               # 감소 (기본 8 -> 2)
        min-idle: 1               # 감소 (기본 2 -> 1)
        max-wait: 1000

  # 메일 서비스 설정 (기존과 동일)
  mail:
    host: smtp.gmail.com
    port: 587
    username: ENC(aJXkjRnsjBd1oufOMb6g6ym/WMkhfVcineV1rQmBUXE=)
    password: ENC(nNbCejUSACUyBVRTVIe4FtMbjnafJu3tKrbRyYln9HU=)
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
        debug: false

  # OAuth2 소셜 로그인 설정 (기존과 동일)
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ENC(HLsxmwnKpVf/4v3pYCG7sSL2xSCWz+BqIiQVsb7SjGG5Ksvu/LtEdH0zOSDmz+73agjjId6hCLxukEJpdIMyu5iWCqIF+qen+Q6dWGuu/XIAZhqOauDZ/g==)
            client-secret: ENC(WSLzpXuolZOfzgTf+qjrr6Gf4RSkryMKPPJ4Le60XGoORSEepi3YEFXHEBIX97Gj)
            scope:
              - email
              - profile
          github:
            client-id: ENC(lc8/CuA09F9qPFY527byag6IqKHI/6IYbhVnrLF1Dts=)
            client-secret: ENC(FfWgdnhn8cOC2Tkg+lktEmRUhpqJCWDVb5Zr0ZEjuOqf6C7/nYQKr9xTCCrg8Loe4p1Pwxt6ymk=)
            scope:
              - read:user
              - user:email
          naver:
            client-id: ENC(HO3324HgczX77NrMgF/88ccosv5GxBaezYAVQTR1Btk=)
            client-secret: ENC(PfLVdY8hOQyC4UvllGWwTditGV95nLJF)
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# MyBatis 설정
mybatis:
  mapper-locations: classpath:mapper/**/*.xml
  type-handlers-package: com.qrystal.app.question.handler
  configuration:
    map-underscore-to-camel-case: true
    default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler

# 로깅 설정 (메모리 최적화)
logging:
  config: classpath:logback-spring.xml
  level:
    root: WARN                    # ERROR -> WARN으로 완화
    com.qrystal: INFO
    org.springframework: WARN
    org.apache.http: WARN         # HTTP 클라이언트 로그 추가
  charset:
    console: UTF-8
    file: UTF-8
  file:
    name: /app/logs/application.log  # 컨테이너 내부 경로
    max-size: 5MB                 # 10MB -> 5MB로 감소
    max-history: 7                # 30 -> 7일로 감소

# Jasypt 암호화 설정
jasypt:
  encryptor:
    password: ${JASYPT_ENCRYPTOR_PASSWORD}
    algorithm: PBEWithMD5AndDES

# SpringDoc 설정 (프로덕션이므로 비활성화)
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false

# Actuator 설정 (헬스체크용)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  health:
    redis:
      enabled: true
    db:
      enabled: true

# JVM 최적화 설정 (application.yml에서는 설정할 수 없지만 참고용)
# Docker run 시 다음 옵션 추가 권장:
# -Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200
