# 서버 설정
server:
  port: 80  # 서비스 포트
  servlet:
    context-path: /  # 기본 경로
    encoding:
      charset: UTF-8  # 문자 인코딩
      force: true     # 인코딩 강제 적용
      enabled: true   # 인코딩 활성화
  tomcat:
    max-threads: 400              # 최대 워커 스레드 수 (프로덕션에서 증가)
    connection-timeout: 20000     # 연결 타임아웃 (ms)
    max-connections: 10000        # 최대 동시 연결 수
    accept-count: 500             # 모든 스레드가 사용 중일 때 대기 큐 크기

# 스프링 설정
spring:
  # 데이터베이스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver  # MySQL 드라이버
    url: ENC(KgM8OzzgPpdhF9G5XzzNIMR7xmVAERFPrphxa3X/MvX5TO4AHY6GsVFw2Cs9U1NQjTnNIHkjcAU8eWdz9C0HrbIEhL65fqU6)  # 암호화된 DB URL
    username: ENC(6R/c31GTSL0h+tEDEJr8pA==)      # 암호화된 DB 사용자명
    password: ENC(qZRj27Us+5WqWEaxLwBuZ2by25Mpwf+eF2TsEMIdTys=)  # 암호화된 DB 비밀번호
    hikari:  # HikariCP 커넥션 풀 설정 (프로덕션 최적화)
      maximum-pool-size: 10   # 최대 커넥션 수
      minimum-idle: 5         # 최소 유휴 커넥션 수
      idle-timeout: 30000     # 유휴 커넥션 타임아웃 (ms)
      connection-timeout: 30000  # 커넥션 획득 타임아웃 (ms)

  # MVC 설정
  mvc:
    static-path-pattern: /**  # 정적 리소스 패턴

  # 타임리프 설정
  thymeleaf:
    prefix: classpath:/templates/  # 템플릿 위치
    suffix: .html                  # 확장자
    cache: true                    # 프로덕션 환경에서는 캐싱 활성화
    encoding: UTF-8               # 인코딩
    mode: HTML                    # 템플릿 모드

  # 정적 리소스 설정
  web:
    resources:
      static-locations: classpath:/static/  # 정적 파일 위치
      cache:
        period: 3600  # 정적 리소스 캐싱 기간 (초) - 프로덕션에서 활성화

  # Redis 설정
  redis:
    host: ${REDIS_SERVER_URL}  # Redis 서버 URL (환경 변수에서 가져옴)
    port: 6379                # Redis 포트
    password: ${REDIS_PASSWORD}  # Redis 비밀번호 (환경 변수에서 가져옴)
    timeout: 3000             # Redis 작업 타임아웃 (ms)
    lettuce:  # Lettuce 클라이언트 풀 설정 (프로덕션 최적화)
      pool:
        max-active: 8   # 최대 활성 연결 수
        max-idle: 8     # 최대 유휴 연결 수
        min-idle: 2     # 최소 유휴 연결 수
        max-wait: 1000  # 연결 획득 최대 대기 시간 (ms)

  # 메일 서비스 설정
  mail:
    host: smtp.gmail.com  # SMTP 서버
    port: 587             # SMTP 포트
    username: ENC(aJXkjRnsjBd1oufOMb6g6ym/WMkhfVcineV1rQmBUXE=)  # 암호화된 이메일 계정
    password: ENC(nNbCejUSACUyBVRTVIe4FtMbjnafJu3tKrbRyYln9HU=)  # 암호화된 이메일 비밀번호
    properties:
      mail:
        smtp:
          auth: true                 # SMTP 인증 사용
          starttls:
            enable: true            # TLS 활성화
        debug: false                # 프로덕션에서는 디버그 비활성화

  # OAuth2 소셜 로그인 설정
  security:
    oauth2:
      client:
        registration:
          # Google 로그인 설정
          google:
            client-id: ENC(HLsxmwnKpVf/4v3pYCG7sSL2xSCWz+BqIiQVsb7SjGG5Ksvu/LtEdH0zOSDmz+73agjjId6hCLxukEJpdIMyu5iWCqIF+qen+Q6dWGuu/XIAZhqOauDZ/g==)
            client-secret: ENC(WSLzpXuolZOfzgTf+qjrr6Gf4RSkryMKPPJ4Le60XGoORSEepi3YEFXHEBIX97Gj)
            scope:
              - email
              - profile
          # GitHub 로그인 설정
          github:
            client-id: ENC(lc8/CuA09F9qPFY527byag6IqKHI/6IYbhVnrLF1Dts=)
            client-secret: ENC(FfWgdnhn8cOC2Tkg+lktEmRUhpqJCWDVb5Zr0ZEjuOqf6C7/nYQKr9xTCCrg8Loe4p1Pwxt6ymk=)
            scope:
              - read:user
              - user:email
          # Naver 로그인 설정
          naver:
            client-id: ENC(HO3324HgczX77NrMgF/88ccosv5GxBaezYAVQTR1Btk=)
            client-secret: ENC(PfLVdY8hOQyC4UvllGWwTditGV95nLJF)
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"  # 리디렉션 URI
            authorization-grant-type: authorization_code  # 인증 방식
            scope: name, email, profile_image  # 권한 범위
            client-name: Naver  # 클라이언트 이름
          # Kakao 로그인 설정 (주석 처리됨)
        #          kakao:
        #            client-id: ENC(MrXAKAzMWl5JrPEbEUDrMXXG0hAjQmUMvJnU2mowB2EzmrzazAIrh9EiZbPXMwie)
        #            client-secret: ENC(GqWkolzYoqclOmXTi9MeNugW9yH3j6h8Ig6ouynPgFpq4Rq9dHMw2GyxpJrPBBbD)
        #            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        #            authorization-grant-type: authorization_code
        #            client-authentication-method: client_secret_post
        #            scope:
        #              - profile_nickname
        #              - profile_image
        #              - account_email
        #            client-name: Kakao
        # 소셜 로그인 제공자 설정
        provider:
          # Naver 제공자 설정
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize  # 인증 URI
            token-uri: https://nid.naver.com/oauth2.0/token  # 토큰 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me  # 사용자 정보 URI
            user-name-attribute: response  # 사용자 이름 속성
          # Kakao 제공자 설정 (주석 처리됨)
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-name-attribute: id

# MyBatis 설정
mybatis:
  mapper-locations: classpath:mapper/**/*.xml  # Mapper XML 파일 위치
  type-handlers-package: com.qrystal.app.question.handler  # 타입 핸들러 패키지
  configuration:
    map-underscore-to-camel-case: true  # 언더스코어를 카멜케이스로 변환
    default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler  # Enum 기본 핸들러

# 로깅 설정
logging:
  config: classpath:logback-spring.xml  # Logback 설정 파일
  level:
    root: ERROR                # 루트 로그 레벨 (프로덕션에서는 ERROR로 설정)
    com.qrystal: INFO          # 애플리케이션 로그 레벨 (프로덕션에서는 INFO로 변경)
    org.springframework: WARN  # 스프링 프레임워크 로그 레벨 (프로덕션에서는 WARN으로 변경)
  charset:
    console: UTF-8  # 콘솔 로그 인코딩
    file: UTF-8     # 파일 로그 인코딩
  file:
    name: /var/log/qrystal/application.log  # 로그 파일 경로 (프로덕션 경로)
    max-size: 10MB        # 최대 로그 파일 크기
    max-history: 30       # 보관할 로그 파일 수

# Jasypt 암호화 설정
jasypt:
  encryptor:
    password: ${JASYPT_ENCRYPTOR_PASSWORD}  # 암호화 비밀번호 (환경 변수에서 가져옴)
    algorithm: PBEWithMD5AndDES             # 암호화 알고리즘

# SpringDoc 설정 (API 문서)
springdoc:
  api-docs:
    enabled: false  # 프로덕션에서는 API 문서 비활성화
  swagger-ui:
    enabled: false  # 프로덕션에서는 Swagger UI 비활성화